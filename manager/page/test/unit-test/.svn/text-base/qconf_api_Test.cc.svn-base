#include "gtest/gtest.h"
#include "driver_api.h"
#include "driver_const_def.h"
#include "qconf_map.h"
#include "format_util.h"

//unit test case for qconf_api.c

//Related test environment set up and tear down
static qhasharr_t* tbl = NULL;

class qconf_apiTestF : public ::testing::Test
{
protected:
    static void SetUpTestCase()
    {
        init_qhasharr_lock();
        init_hash_tbl(&tbl, QCONF_DEFAULT_SHM_KEY, 0666);
        init_qconf_env();
    }
    virtual void SetUp()
    {
    }

    virtual void TearDown()
    {
        hash_tbl_clear(tbl);
        clear_zk_env();
    }

    static void TearDownTestCase()
    {
        destroy_qhasharr_lock();
    }
};

/**
  *Begin_Test_for function: int qconf_get(const char *path, int len, char **buf, int *buf_len, int flags)
  *===============================================================================================================
  */

//Test for qconf_get: err_get_idc
TEST_F(qconf_apiTestF, qconf_get_err_get_idc)
{
    int retCode = 0;
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    const char* nodeval = "demo-test";
    int nodeval_len = 9;
    const char* path = "/qconf/demo";
    int len = 11;
    char* buf = NULL;
    int buf_len = 0;
    const char* idc = "corp";

    serialize_to_tblkey(QCONF_DATA_TYPE_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_node(tbl, tbl_key, nodeval, nodeval_len);
    retCode = qconf_get(path, len, &buf, &buf_len, NULL, QCONF_NOWAIT);

    //EXPECT_EQ(QCONF_ERR_GET_IDC, retCode);
}

//Test for qconf_get: QCONF_ERR_NOT_FOUND: key not exists and flags=QCONF_NOWAIT
TEST_F(qconf_apiTestF, qconf_get_node_not_exists_flags_nowait)
{
    int retCode = 0;
    //char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    const char* path = "/qconf/de123";
    int len = 12;
    char* buf = NULL;
    int buf_len = 0;
    const char* idc = "corp";
    char tbl_key[QCONF_TBLKEY_MAX_LEN] = {0};

    retCode = serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    EXPECT_EQ(QCONF_OK, retCode);

    retCode = hash_tbl_remove(tbl, tbl_key);
    EXPECT_NE(QCONF_FAILED, retCode);

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_NODE, idc, path, tbl_key, sizeof(tbl_key));
    retCode = qconf_get(path, len, &buf, &buf_len, idc, QCONF_NOWAIT);

    EXPECT_EQ(QCONF_ERR_NOT_FOUND, retCode);
}

//Test for qconf_get: QCONF_ERR_NOT_FOUND: key not exists and flags!=QCONF_NOWAIT
TEST_F(qconf_apiTestF, qconf_get_node_not_exists_flags_wait)
{
    int retCode = 0;
    const char* path = "/qconf/de123";
    int len = 12;
    char* buf = NULL;
    int buf_len = 0;
    const char* idc = "corp";
    char tbl_key[QCONF_TBLKEY_MAX_LEN] = {0};

    retCode = serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    EXPECT_EQ(QCONF_OK, retCode);

    retCode = hash_tbl_remove(tbl, tbl_key);
    EXPECT_NE(QCONF_FAILED, retCode);

//    qconf_set_idc(idc);
    retCode = qconf_get(path, len, &buf, &buf_len, idc, 0);

    EXPECT_EQ(QCONF_ERR_NOT_FOUND, retCode);
}

//Test for qcong_get: null value
TEST_F(qconf_apiTestF, qconf_get_null_value)
{
    int retCode = 0;
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    const char* nodeval = "";
    int nodeval_len = 0;
    const char* path = "/qconf/test12345";
    int len = 16;
    char* buf = NULL;
    int buf_len = 0;
    const char* idc = "corp";

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_node(tbl, tbl_key, nodeval, nodeval_len);
    retCode = qconf_get(path, len, &buf, &buf_len, idc, QCONF_NOWAIT);

    EXPECT_EQ(QCONF_ERR_NULL_VALUE, retCode);
}

//Test for qconf_get: get successfully
TEST_F(qconf_apiTestF, qconf_get)
{
    int retCode = 0;
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    const char* nodeval = "demo-test";
    int nodeval_len = 9;
    const char* path = "/qconf/demo";
    int len = 11;
    char* buf = NULL;
    int buf_len = 0;
    const char* idc = "corp";

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_node(tbl, tbl_key, nodeval, nodeval_len);
    retCode = qconf_get(path, len, &buf, &buf_len, idc, QCONF_NOWAIT);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(9, buf_len);
    EXPECT_STREQ("demo-test", buf);
    free(buf);
    buf = NULL;
}

//Test for qconf_get: get successfully and flags=0
TEST_F(qconf_apiTestF, qconf_get_successfully)
{
    int retCode = 0;
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    const char* nodeval = "demo-test";
    int nodeval_len = 9;
    const char* path = "/qconf/demo";
    int len = 11;
    char* buf = NULL;
    int buf_len = 0;
    const char* idc = "corp";

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_node(tbl, tbl_key, nodeval, nodeval_len);
    retCode = qconf_get(path, len, &buf, &buf_len, idc, QCONF_NOWAIT);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(9, buf_len);
    EXPECT_STREQ("demo-test", buf);
    free(buf);
    buf = NULL;
}
/**
  *End_Test_for function :int qconf_get(const char *path, int len, char **buf, int *buf_len, int flags)
  *============================================================================================================
  */

/**
  *=============================================================================================================
  *Begin_Test_for function: int qconf_get_children(const char *path, int len, String_vector_t *nodes, int flags)
  */

//Test for qconf_Get_children: err_get_idc
TEST_F(qconf_apiTestF, qconf_get_children_err_get_idc)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    nodes.count = 3;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

    char valid_flg[] = {1, 1, 0};
    int flags = QCONF_NOWAIT;
    const char* idc = "crop";

    serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_chd(tbl, tbl_key, &nodes, valid_flg);
    retCode = qconf_get_children(path, len, &nodes_buf, NULL, flags);

//    EXPECT_EQ(QCONF_ERR_GET_IDC, retCode);
}

//Test for qconf_Get_children: nulll chdnodeval: nodes.count=0
TEST_F(qconf_apiTestF, qconf_get_children_null_chdval)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = QCONF_NOWAIT;
    const char* idc = "crop";
    char valid_flg[] = {0};

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_chd(tbl, tbl_key, &nodes, valid_flg);
    retCode = qconf_get_children(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_ERR_NULL_VALUE, retCode);
}

//Test for qconf_Get_children: chdval not null, but num of valid node =0
TEST_F(qconf_apiTestF, qconf_get_children_zero_valid_nodes)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = QCONF_NOWAIT;
    char valid_flg[5] = {0};
    const char* idc = "corp";
    nodes.count = 5;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_chd(tbl, tbl_key, &nodes, valid_flg);
    retCode = qconf_get_children(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_ERR_NULL_VALUE, retCode);
}

//Test for qconf_get_children: QCONF_ERR_NOT_FOUND and flags=QCONF_NOWAIT
TEST_F(qconf_apiTestF, qconf_get_children_not_exists_nowait)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    int len = 9;
    String_vector_t nodes_buf = {0};
    int flags = QCONF_NOWAIT;
    const char* idc = "corp";

//    qconf_set_idc(idc);
    retCode = qconf_get_children(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_ERR_NOT_FOUND, retCode);
}

//Test for qconf_get_children: QCONF_ERR_NOT_FOUND and flags!=QCONF_NOWAIT
TEST_F(qconf_apiTestF, qconf_get_children_not_exists_wait)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    int len = 9;
    String_vector_t nodes_buf = {0};
    int flags = 0;
    const char* idc = "corp";

//    qconf_set_idc(idc);
    retCode = qconf_get_children(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_ERR_NOT_FOUND, retCode);
}

//Test for qconf_get_children: get successfully
TEST_F(qconf_apiTestF, qconf_get_children_successfully)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[1024] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = QCONF_NOWAIT;
    char valid_flg[5] = {1, 1, 1, 0, 0};
    const char* idc = "corp";
    nodes.count = 5;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_chd(tbl, tbl_key, &nodes, valid_flg);
    retCode = qconf_get_children(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(3, nodes_buf.count);
    EXPECT_STREQ("10.15.16.17:0", nodes_buf.data[0]);
    EXPECT_STREQ("10.15.16.17:1", nodes_buf.data[1]);
    EXPECT_STREQ("10.15.16.17:2", nodes_buf.data[2]);
    int i = 0;
    free_String_vector((&nodes), i, nodes.count);
}

// //Test for qconf_get_children: get successfully and all nodes valid
TEST_F(qconf_apiTestF, qconf_get_children_successfully_and_all_nodes_valid)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[1024] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = QCONF_NOWAIT;
    char valid_flg[5] = {1, 1, 1, 1, 1};
    const char* idc = "corp";
    nodes.count = 5;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_chd(tbl, tbl_key, &nodes, valid_flg);

    retCode = qconf_get_children(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(5, nodes_buf.count);
    EXPECT_STREQ("10.15.16.17:0", nodes_buf.data[0]);
    EXPECT_STREQ("10.15.16.17:1", nodes_buf.data[1]);
    EXPECT_STREQ("10.15.16.17:2", nodes_buf.data[2]);
    EXPECT_STREQ("10.15.16.17:3", nodes_buf.data[3]);
    EXPECT_STREQ("10.15.16.17:4", nodes_buf.data[4]);
    int i = 0;
    free_String_vector((&nodes), i, nodes.count);
}

//Test for qconf_get_children: get successfully and all nodes valid and flags=0
TEST_F(qconf_apiTestF, qconf_get_children_successfully_and_all_nodes_valid_wait)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[1024] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = 0;
    char valid_flg[5] = {1, 1, 1, 1, 1};
    const char* idc = "corp";
    nodes.count = 5;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_SERVICE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_chd(tbl, tbl_key, &nodes, valid_flg);
    retCode = qconf_get_children(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(5, nodes_buf.count);
    EXPECT_STREQ("10.15.16.17:0", nodes_buf.data[0]);
    EXPECT_STREQ("10.15.16.17:1", nodes_buf.data[1]);
    EXPECT_STREQ("10.15.16.17:2", nodes_buf.data[2]);
    EXPECT_STREQ("10.15.16.17:3", nodes_buf.data[3]);
    EXPECT_STREQ("10.15.16.17:4", nodes_buf.data[4]);
    int i = 0;
    free_String_vector((&nodes), i, nodes.count);
}

/**
  *End_Test_for function: int qconf_get_children(const char *path, int len, String_vector_t *nodes, int flags)
  *============================================================================================================
  */

/**
  *=============================================================================================================
  *Begin_Test_for function: int qconf_get_batchnode(const char *path, int len, String_vector_t *nodes, int flags)
  */

//Test for qconf_Get_children: err_get_idc
TEST_F(qconf_apiTestF, qconf_get_batchnode_keys_err_get_idc)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    nodes.count = 3;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

    int flags = QCONF_NOWAIT;
    const char* idc = "crop";

    serialize_to_tblkey(QCONF_DATA_TYPE_BATCH_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_batchnode(tbl, tbl_key, &nodes);
    retCode = qconf_get_batchnode_keys(path, len, &nodes_buf, NULL, flags);

//    EXPECT_EQ(QCONF_ERR_GET_IDC, retCode);
}

//Test for qconf_Get_children: nulll chdnodeval: nodes.count=0
TEST_F(qconf_apiTestF, qconf_get_batchnode_keys_null_chdval)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = QCONF_NOWAIT;
    const char* idc = "crop";

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_BATCH_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_batchnode(tbl, tbl_key, &nodes);
    retCode = qconf_get_batchnode_keys(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_ERR_NULL_VALUE, retCode);
}

//Test for qconf_get_batchnode_keys: QCONF_ERR_NOT_FOUND and flags=QCONF_NOWAIT
TEST_F(qconf_apiTestF, qconf_get_batchnode_keys_not_exists_nowait)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    int len = 9;
    String_vector_t nodes_buf = {0};
    int flags = QCONF_NOWAIT;
    const char* idc = "corp";

//    qconf_set_idc(idc);
    retCode = qconf_get_batchnode_keys(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_ERR_NOT_FOUND, retCode);
}

//Test for qconf_get_batchnode_keys: QCONF_ERR_NOT_FOUND and flags!=QCONF_NOWAIT
TEST_F(qconf_apiTestF, qconf_get_batchnode_keys_not_exists_wait)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    int len = 9;
    String_vector_t nodes_buf = {0};
    int flags = 0;
    const char* idc = "corp";

//    qconf_set_idc(idc);
    retCode = qconf_get_batchnode_keys(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_ERR_NOT_FOUND, retCode);
}

//Test for qconf_get_batchnode_keys: get successfully
TEST_F(qconf_apiTestF, qconf_get_batchnode_keys_successfully)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[1024] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = QCONF_NOWAIT;
    const char* idc = "corp";
    nodes.count = 5;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_BATCH_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_batchnode(tbl, tbl_key, &nodes);
    retCode = qconf_get_batchnode_keys(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(5, nodes_buf.count);
    EXPECT_STREQ("10.15.16.17:0", nodes_buf.data[0]);
    EXPECT_STREQ("10.15.16.17:1", nodes_buf.data[1]);
    EXPECT_STREQ("10.15.16.17:2", nodes_buf.data[2]);
    EXPECT_STREQ("10.15.16.17:3", nodes_buf.data[3]);
    EXPECT_STREQ("10.15.16.17:4", nodes_buf.data[4]);
    int i = 0;
    free_String_vector((&nodes), i, nodes.count);
}

//Test for qconf_get_batchnode_keys: get successfully and all nodes valid and flags=0
TEST_F(qconf_apiTestF, qconf_get_batchnode_keys_successfully_and_all_nodes_valid_wait)
{
    int retCode = 0;
    const char* path = "/qconf/ok";
    char tbl_key[QCONF_PATH_BUF_LEN] = {0};
    int len = 9;
    char tmp[1024] = {0};
    String_vector_t nodes_buf = {0};
    String_vector_t nodes = {0};
    int flags = 0;
    const char* idc = "corp";
    nodes.count = 5;
    nodes.data = (char**)malloc(sizeof(char*)*nodes.count);

    for(int i = 0; i < nodes.count; i++)
    {
        snprintf(tmp, sizeof(tmp), "10.15.16.17:%d", i);
        nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(tmp) + 1));
        memcpy(nodes.data[i], tmp, strlen(tmp));
        nodes.data[i][strlen(tmp)] = '\0';
    }

//    qconf_set_idc(idc);
    serialize_to_tblkey(QCONF_DATA_TYPE_BATCH_NODE, idc, path, tbl_key, sizeof(tbl_key));
    update_tbl_by_batchnode(tbl, tbl_key, &nodes);
    retCode = qconf_get_batchnode_keys(path, len, &nodes_buf, idc, flags);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(5, nodes_buf.count);
    EXPECT_STREQ("10.15.16.17:0", nodes_buf.data[0]);
    EXPECT_STREQ("10.15.16.17:1", nodes_buf.data[1]);
    EXPECT_STREQ("10.15.16.17:2", nodes_buf.data[2]);
    EXPECT_STREQ("10.15.16.17:3", nodes_buf.data[3]);
    EXPECT_STREQ("10.15.16.17:4", nodes_buf.data[4]);
    int i = 0;
    free_String_vector((&nodes), i, nodes.count);
}

/**
  *End_Test_for function: int qconf_get_batchnode_keys(const char *path, int len, String_vector_t *nodes, int flags)
  *============================================================================================================
  */

//End_Test_for qconf_api.c
