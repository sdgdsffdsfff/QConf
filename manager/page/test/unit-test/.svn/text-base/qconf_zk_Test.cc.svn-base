#include <zookeeper.h>

#include "gtest/gtest.h"
#include "agent_const_def.h"
#include "agent_zk.h"
#include "format_util.h"

#define MAX_NODE_NUM 20


//unit test case for qconf_zk.c

//Related test environment set up 1:
class qconf_zkTestF : public :: testing::Test
{
protected:
    virtual void SetUp()
    {
        nodes.count = MAX_NODE_NUM;
        nodes.data = (char**)malloc(sizeof(char*)*nodes.count);
        char temp[100] = {0};

        for(int i = 0; i < nodes.count; i++)
        {
            snprintf(temp, 100, "10.15.16.17:%d", i);
            nodes.data[i] = (char*)malloc(sizeof(char) * (strlen(temp) + 1));
            memcpy(nodes.data[i], temp, strlen(temp));
            nodes.data[i][strlen(temp)] = '\0';
        }
    }

    virtual void TearDown()
    {
        int i = 0;
        free_String_vector((&nodes), i, nodes.count);
    }

    String_vector_t nodes;

};

static void global_watcher(zhandle_t* zh, int type, int state, const char* path, void* context)
{
    //to do something
}

//Related test environment set up 2:
class qconf_zkTestZkF : public ::testing::Test
{
protected:
    virtual void SetUp()
    {
        const char* host = "10.123.82.39:2181,10.123.82.42:2181,10.123.82.44:2181";
        zh = zookeeper_init(host, global_watcher, QCONF_ZK_DEFAULT_RECV_TIMEOUT, NULL, NULL, 0);
    }

    virtual void TearDown()
    {
        zookeeper_close(zh);
    }

    zhandle_t* zh;
};

/**
  *==================================================================================
  *Begin_Test_for function: int zk_get_up_chd_nodes(String_vector_t *nodes, char* valid_flg, int vaild_size)
  */

//Test for zk_get_up_chd_nodes : null nodes
/*TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_null_nodes)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM]={0};

	retCode=zk_get_up_chd_nodes(NULL,valid_flg,0);

	EXPECT_EQ(-1,retCode);
}

//Test for zk_get_up_chd_nodes: null valid_flg
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_null_valid_flg)
{
	int retCode=0;

	retCode=zk_get_up_chd_nodes(&nodes,NULL,0);

	EXPECT_EQ(-1,retCode);
}

//Test for zk_get_up_chd_nodes: count of nodes =0
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_count_of_nodes_is_zero)
{
	int retCode=0;
	String_vector_t snodes;
	memset(&snodes,0,sizeof(snodes));
	char valid_flg[MAX_NODE_NUM];
	memset(valid_flg,1,MAX_NODE_NUM);

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(0,snodes.count);
}

//Test for zk_get_up_chd_nodes: count of valid nodes = 0
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_zero_node_valid)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM]={0};

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(0,nodes.count);
}

//Test for zk_get_up_chd_nodes: count of valid nodes = nodes.count
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_all_nodes_valid)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM];
	memset(valid_flg,1,MAX_NODE_NUM);
	char temp[20]={0};

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(MAX_NODE_NUM,nodes.count);
	for(int i=0;i<nodes.count;i++)
	{
		snprintf(temp,20,"10.15.16.17:%d",i);
		EXPECT_STREQ(temp,nodes.data[i]);
	}
}

//Test for zk_get_zhd_nodes: count of valid nodes =1 and the valid node is the first one
 TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_the_first_node_valid)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM];
	valid_flg[0]=1;
	memset(valid_flg+1,0,MAX_NODE_NUM-1);

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(1,nodes.count);
	EXPECT_STREQ("10.15.16.17:0",nodes.data[0]);
}

//Test for zk_get_zhd_nodes: count of valid nodes =1 and the valid node is the last one
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_the_last_node_valid)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM];
	memset(valid_flg,0,MAX_NODE_NUM-1);
	valid_flg[MAX_NODE_NUM-1]=1;

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(1,nodes.count);
	EXPECT_STREQ("10.15.16.17:19",nodes.data[0]);
}

////Test for zk_get_zhd_nodes: count of valid nodes =1 and the valid node is the mid one
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_the_mid_node_valid)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM];
	memset(valid_flg,0,MAX_NODE_NUM);
	valid_flg[10]=1;

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(1,nodes.count);
	EXPECT_STREQ("10.15.16.17:10",nodes.data[0]);
}

//Test for zk_get_chd_nodes: count of valid nodes = 10
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_ten_nodes_valid)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM];
	char temp[20]={0};

	for(int i=0;i<MAX_NODE_NUM;i++)
	{
		if(i%2==0)
			valid_flg[i]=1;
		else
			valid_flg[i]=0;
	}

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(10,nodes.count);
	for(int i=0;i<10;i++)
	{
		snprintf(temp,20,"10.15.16.17:%d",i*2);
		EXPECT_STREQ(temp,nodes.data[i]);
	}
}

//Test for zk_get_chd_nodes: count of valid nodes =10 and the index of count is irregular
TEST_F(qconf_zkTestF,zk_get_up_chd_nodes_ten_nodes_valid_irregular)
{
	int retCode=0;
	char valid_flg[MAX_NODE_NUM]={1,0,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0};
	char** temp=(char**)malloc(sizeof(char*)*9);
	int j=0;

	for(int i=0;i<MAX_NODE_NUM && j<9;i++)
	{
		if(1==valid_flg[i])
		{
			temp[j]=(char*)malloc(sizeof(char)*(strlen(nodes.data[i])+1));
			snprintf(temp[j],strlen(nodes.data[i])+1,"10.15.16.17:%d",i);
			j++;
		}
	}

	retCode=zk_get_up_chd_nodes(&nodes,valid_flg,0);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(9,nodes.count);
	for(int i=0;i<9;i++)
	{
		EXPECT_STREQ(temp[i],nodes.data[i]);
	}
	for(int i=0;i<9;i++)
	{
		free(temp[i]);
		temp[i]=0;
	}
}*/

/**
  *End_Test_for function: int zk_get_up_chd_nodes(String_vector_t *nodes, char* valid_flg, int vaild_size)
  *=========================================================================================================
  */

/**
  *=========================================================================================================
  *Begin_Test_for function: int zk_create_node(zhandle_t* zh, const char *path, char *val, char* realpath_buf, int buf_size)
  */

//Test for zk_create_node: bad arguments
TEST_F(qconf_zkTestZkF, zk_create_node_bad_arguments)
{
    int retCode = 0;
    const char* path = "test123";
    const char* val = "hello";
    char realpath_buf[1024] = {0};

    retCode = zk_create_node(qconf_zkTestZkF::zh, path, val, realpath_buf, 1024);

    EXPECT_EQ(-1, retCode);
    EXPECT_STREQ("", realpath_buf);
}

//Test for zk_create_node: node not exists
TEST_F(qconf_zkTestZkF, zk_create_node_not_exists)
{
    int retCode = 0;
    const char* path = "/qconf/test1";
    const char * val = "hello";
    char realpath_buf[1024] = {0};
    int ret = 0;

    ret = zoo_exists(zh, path, 0, NULL);
    if (ZOK == ret)
    {
        ret = zoo_delete(zh, path, -1);
    } 

    retCode = zk_create_node(zh, path, val, realpath_buf, 1024);

    EXPECT_EQ(0, retCode);
    EXPECT_STREQ("/qconf/test1", realpath_buf);
}

//Test for zk_create_node: node already exists
TEST_F(qconf_zkTestZkF, zk_create_node_already_exists)
{
    int retCode = 0;
    int retCode1 = 0;
    const char* path = "/qconf/test12";
    const char * val = "hello";
    char realpath_buf[1024] = {0};
    int ret = 0;
    ret = zoo_exists(zh, path, 0, NULL);
    if (ZOK == ret)
    {
        ret = zoo_delete(zh, path, -1);
    } 

    retCode = zk_create_node(zh, path, val, realpath_buf, 1024);
    retCode1 = zk_create_node(zh, path, val, realpath_buf, 1024);

    EXPECT_EQ(0, retCode);
    EXPECT_EQ(-1, retCode1);
    EXPECT_STREQ("/qconf/test12", realpath_buf);
}
/**
  *End_Test_for function: int zk_create_node(zhandle_t* zh, const char *path, char *val, char* realpath_buf, int buf_size)
  *========================================================================================================
  */

/**
  *========================================================================================================
  *Begin_Test_for function: int zk_get_node(zhandle_t* zh, const char *path, char **buf, int *len)
  */

//Test for zk_get_node: node not exists
TEST_F(qconf_zkTestZkF, zk_get_node_not_exists)
{
    int retCode = 0;
    const char* path = "/qconf/test";
    char* buf = NULL;
    int len = 0;

    retCode = zk_get_node(zh, path, &buf, &len);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(NULL, buf);
    EXPECT_EQ(QCONF_NODE_NOT_EXIST, len);
}

//Test for zk_get_node: bad arguments
TEST_F(qconf_zkTestZkF, zk_get_node_bad_arguments)
{
    int retCode = 0;
    const char* path = "test/bad/args";
    char* buf = NULL;
    int len = 0;

    retCode = zk_get_node(zh, path, &buf, &len);

    EXPECT_EQ(QCONF_ERR_ZOO_FAILED, retCode);
    EXPECT_EQ(NULL, buf);
    EXPECT_EQ(QCONF_INVALID_LEN, len);
}

//Test for zk_get_node: node exists
TEST_F(qconf_zkTestZkF, zk_get_node_exists)
{
    int retCode = 0;
    const char* path = "/qconf/test1";
    char* buf = NULL;
    int len = 0;

    retCode = zk_get_node(zh, path, &buf, &len);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(5, len);
    EXPECT_STREQ("hello", buf);
    free(buf);
}

//Test for zk_get_node: node val = NULL
TEST_F(qconf_zkTestZkF, zk_get_node_with_null_val)
{
    int retCode = 0;
    const char* path = "/qconf/nullval";
    char* buf = NULL;
    char realpath_buf[1024] = {0};
    int len = 0;

    zoo_create(zh, path, NULL, -1, &ZOO_OPEN_ACL_UNSAFE, 0, realpath_buf, 1024);
    retCode = zk_get_node(zh, path, &buf, &len);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(-1, len);
    EXPECT_STREQ("", buf);
    free(buf);
}
/**
  *End_Test_for function: int zk_get_node(zhandle_t* zh, const char *path, char **buf, int *len)
  *=========================================================================================================
  */

/**
  *=========================================================================================================
  *Begin_Test_for function: int zk_set_node(zhandle_t* zh, const char *path, char *val, int val_len)
  */

//Test for zk_set_node: node not exists
TEST_F(qconf_zkTestZkF, zk_set_node_not_exists)
{
    int retCode = 0;
    const char* path = "/qconf/ttt";
    const char* val = "hello";

    retCode = zk_set_node(zh, path, val, 5);

    EXPECT_EQ(-1, retCode);
}

//Test for zk_set_node: bad arguments
TEST_F(qconf_zkTestZkF, zk_set_node_bad_arguments)
{
    int retCode = 0;
    const char* path = "qconf/ttt";
    const char* val = "hello";

    retCode = zk_set_node(zh, path, val, 5);

    EXPECT_EQ(-1, retCode);
}

//Test for zk_set_node: val=NULL
/*TEST_F(qconf_zkTestZkF,zk_set_node_val_null)
{
	int retCode=0;
	const char* path="/qconf/test1";
	char* buf=NULL;
	int len=0;

	retCode=zk_set_node(zh,path,NULL,5);
	retCode-=zk_get_node(zh,path,&buf,&len);

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(-1,len);
	EXPECT_STREQ("",buf);
	free(buf);
}*/

//Test for zk_set_node: node already exists
TEST_F(qconf_zkTestZkF, zk_set_node_exists)
{
    int retCode = 0;
    const char* path = "/qconf/test1";
    const char* val = "www";
    char* buf = NULL;
    int len = 0;

    retCode = zk_set_node(zh, path, val, 3);
    retCode -= zk_get_node(zh, path, &buf, &len);

    EXPECT_EQ(0, retCode);
    EXPECT_EQ(3, len);
    EXPECT_STREQ("www", buf);
    free(buf);
}
/**
  *End_Test_for function: int zk_set_node(zhandle_t* zh, const char *path, char *val, int val_len)
  *==================================================================================================
  */

/**
  *=========================================================================================================
  *Begin_Test_for function: int zk_exist_path(zhandle_t* zh, const char *path, int *exist)
  */

//Test for zk_exist_path: zh=NULL
TEST(qconf_zkTest, zk_exists_path_null_zh)
{
    int retCode = 0;
    const char* path = "/qconf/demo";
    int exist = 0;

    retCode = zk_exist_path(NULL, path, &exist);

    EXPECT_EQ(QCONF_ERR_PARAM, retCode);
}

//Test for zk_exists_path: path=NULL
TEST_F(qconf_zkTestZkF, zk_exists_path_null_path)
{
    int retCode = 0;
    int exist = 0;

    retCode = zk_exist_path(zh, NULL, &exist);

    EXPECT_EQ(QCONF_ERR_PARAM, retCode);
}

//Test for zk_exists_path: exist=NULL
TEST_F(qconf_zkTestZkF, zk_exists_path_null_exist)
{
    int retCode = 0;
    const char* path = "/qconf/demo";

    retCode = zk_exist_path(zh, path, NULL);

    EXPECT_EQ(QCONF_ERR_PARAM, retCode);
}

//Test for zk_exists_path: not exists
TEST_F(qconf_zkTestZkF, zk_exists_path_not_exists)
{
    int retCode = 0;
    const char* path = "/qconf/demo";
    int exist = 0;

    retCode = zk_exist_path(zh, path, &exist);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(QCONF_NOT_EXIST, exist);
}

//Test for zk_exists_path: bad arguments
TEST_F(qconf_zkTestZkF, zk_exists_path_bad_arguments)
{
    int retCode = 0;
    const char* path = "qconf/demo";
    int exist = 0;

    retCode = zk_exist_path(zh, path, &exist);

    EXPECT_EQ(QCONF_FAILED, retCode);
    EXPECT_EQ(QCONF_NOT_EXIST, exist);
}

//Test for zk_exists_path: node exists
TEST_F(qconf_zkTestZkF, zk_exists_path_exists)
{
    int retCode = 0;
    const char* path = "/qconf/test1";
    int exist = 0;

    retCode = zk_exist_path(zh, path, &exist);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(QCONF_EXIST, exist);
}
/**
  *End_Test_for function: int zk_exist_path(zhandle_t* zh, const char *path, int *exist)
  *===============================================================================================
  */

/**
  *===============================================================================================
  *Begin_Test_for function: int zk_register_ephemeral(zhandle_t *zh, const char* path, const char *value)
  */

//Test for zk_register_ephemeral: zh=NULL
TEST_F(qconf_zkTestZkF, zk_register_ephemeral_null_zh)
{
    int retCode = 0;
    const char* path = "/qconf/test";
    const char* val = "hello";

    retCode = zk_register_ephemeral(NULL, path, val);

    EXPECT_EQ(-1, retCode);
}

//Test for zk_register_ephemeral: path=NULL
TEST_F(qconf_zkTestZkF, zk_register_ephemeral_null_path)
{
    int retCode = 0;
    const char* val = "hello";

    retCode = zk_register_ephemeral(zh, NULL, val);

    EXPECT_EQ(-1, retCode);
}

//Test for zk_register_ephemeral: value=NULL
TEST_F(qconf_zkTestZkF, zk_register_ephemeral_null_value)
{
    int retCode = 0;
    const char* path = "/qconf/test";

    retCode = zk_register_ephemeral(zh, path, NULL);

    EXPECT_EQ(-1, retCode);
}

//Test for zk_register_ephemeral: invalid path
TEST_F(qconf_zkTestZkF, zk_register_ephemeral_invalid_path)
{
    int retCode = 0;
    const char* path = "qconf/test";
    const char* val = "hello";

    retCode = zk_register_ephemeral(zh, path, val);

    EXPECT_EQ(-1, retCode);
}

//Test for zk_register_ephemeral: path="/qconf"
TEST_F(qconf_zkTestZkF, zk_register_ephemeral_path_with_one_delim)
{
    int retCode = 0;
    const char* path = "/qconf/__qconf_register_hosts";
    const char* val = "hello";
    char* buf = NULL;
    int len = 0;
    int ret = 0;
    char hostname[256] = {0};
    char path_buf[1024] = {0};
    ret = gethostname(hostname, sizeof(hostname));
    EXPECT_EQ(0, ret);
    snprintf(path_buf, sizeof(path_buf), "%s/%s-%s", path, hostname, hostname);

    retCode = zk_register_ephemeral(zh, path_buf, val);
    zk_get_node(zh, path_buf, &buf, &len);

    EXPECT_EQ(QCONF_OK, retCode);
    EXPECT_EQ(5, len);
    EXPECT_STREQ("hello", buf);
    free(buf);
    buf = NULL;
}

//End_Test_for qconf_zk.c
