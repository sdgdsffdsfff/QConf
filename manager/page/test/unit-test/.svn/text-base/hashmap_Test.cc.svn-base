#include <stdio.h>
#include <string.h>
#include <limits.h>

#include "gtest/gtest.h"
#include "hashmap.h"

/*
*unit test case for hashmap.c
*/

//Related test  environment set up:
class hashmapTestF : public ::testing::Test
{
protected:
    virtual void SetUp()
    {
        memset(&map, 0, sizeof(map));
    }

    virtual void TearDown()
    {
        hashmap_destroy(&map);
    }

    hashmap_map_t map;
};

/**
  *-------------------------------
  Util class and data structure
  */

struct Item
{
    char* name;
    int id;
    double price;
};

/**
*====================================================================================
* Begin_Test_for function: unsigned long get_next_prime_size(unsigned long n)
*/

//Test for get_next_prime_size: n=0
TEST(hashmapTest, get_next_prime_size_zero)
{
    EXPECT_EQ(53ul, get_next_prime_size(0ul));
}

//Test for get_next_prime_size: n=52
TEST(hashmapTest, get_next_prime_size_arg52)
{
    EXPECT_EQ(53ul, get_next_prime_size(52ul));
}

//Test for get_next_prime_size: n=53
TEST(hashmapTest, get_next_prime_size_arg53)
{
    EXPECT_EQ(53ul, get_next_prime_size(53ul));
}

//Test for get_next_prime_size: n=54
TEST(hashmapTest, get_next_prime_size_arg54)
{
    EXPECT_EQ(97ul, get_next_prime_size(54ul));
}

//Test for get_next_prime_size: n=12582916
TEST(hashmapTest, get_next_prime_size_arg12582916)
{
    EXPECT_EQ(12582917ul, get_next_prime_size(12582916ul));
}

//Test for get_next_prime_size: n=12582917
TEST(hashmapTest, get_next_prime_size_arg12582917)
{
    EXPECT_EQ(12582917ul, get_next_prime_size(12582917ul));
}

//Test for get_next_prime_size: n=12582918
TEST(hashmapTest, get_next_prime_size_arg12582918)
{
    EXPECT_EQ(25165843ul, get_next_prime_size(12582918ul));
}

//Test for get_next_prime_size: n=4294967290
TEST(hashmapTest, get_next_prime_size_arg4294967290)
{
    EXPECT_EQ(4294967291ul, get_next_prime_size(4294967290ul));
}

//Test for get_next_prime_size: n=4294967291
TEST(hashmapTest, get_nexe_prime_size_arg4294967291)
{
    EXPECT_EQ(4294967291ul, get_next_prime_size(4294967291ul));
}

//Test for get_next_prime_size: n=4294967292
TEST(hashmapTest, get_next_prime_size_arg4294967292)
{
    EXPECT_EQ(4294967291ul, get_next_prime_size(4294967292ul));
}

//Test for get_next_prime_size: n=ULONG_MAX
TEST(hashmapTest, get_next_prime_size_arg_ULMAX)
{
    EXPECT_EQ(4294967291ul, get_next_prime_size(ULONG_MAX));
}

//Test for get_next_prime_size: n=-1
TEST(hashmapTest, get_next_prime_size_arg_overflow1)
{
    EXPECT_EQ(4294967291ul, get_next_prime_size(-1));
}

//Test for get_next_prime_size: n=UL_MAX+1
TEST(hashmapTest, get_next_prime_size_arg_overflow2)
{
    long n = ULONG_MAX + 1;
    EXPECT_EQ(53ul, get_next_prime_size(n));
}

/**
 * End_Test_for function: unsigned long get_next_prime_size(unsigned long n)
 *====================================================================================
 */

/**
*====================================================================================
* Begin_Test_for function: int hashmap_init(hashmap_map_t *map, unsigned long size, hashmap_func_t func)
*/

//Test for hashmap_init: NULL pointer arg
TEST_F(hashmapTestF, hashmap_init_arg_nullp)
{
    EXPECT_EQ(HM_E_FAIL, hashmap_init(NULL, 50ul, NULL));
}

//Test for hashmap_init: size=0
TEST_F(hashmapTestF, hashmap_init_normalsize_0)
{
    EXPECT_EQ(HM_S_OK, hashmap_init(&map, 0, NULL));
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_EQ(0ul, map.size);
    EXPECT_EQ(NULL, map.func);
    EXPECT_EQ(NULL, map.internal_pointer);

}

//Test for hashmap_init: size=53
TEST_F(hashmapTestF, hashmap_init_normalsize_53)
{
    EXPECT_EQ(HM_S_OK, hashmap_init(&map, 53, NULL));
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_EQ(0ul, map.size);
    EXPECT_EQ(NULL, map.func);
    EXPECT_EQ(NULL, map.internal_pointer);
}

//Test for hashmap_init: size=54
TEST_F(hashmapTestF, hashmap_init_normalsize_54)
{
    EXPECT_EQ(HM_S_OK, hashmap_init(&map, 54, NULL));
    EXPECT_EQ(97ul, map.table_size);
    EXPECT_EQ(0ul, map.size);
    EXPECT_EQ(NULL, map.func);
    EXPECT_EQ(NULL, map.internal_pointer);
}

/**
* End_Test_for function: int hashmap_init(hashmap_map_t *map, unsigned long size, hashmap_func_t func)
*====================================================================================================
*/

/**
  *==================================================================================================
  *Begin_Test_for function: hashmap_elem_t* hashmap_create_elem(const char* key, const void* data, unsigned int value_len)
  */

//Test for hashmap_create_elem: key=null
TEST_F(hashmapTestF, hashmap_create_elem_arg_nullkey)
{
    hashmap_elem_t* elem;
    const char* data = "test";
    elem = hashmap_create_elem(NULL, (void*)data, 5);
    EXPECT_EQ(NULL, elem);
}

//Test for hashmap_create_elem: data=null
TEST_F(hashmapTestF, hashmap_create_elem_arg_nulldata)
{
    hashmap_elem_t* elem;
    const char* key = "test";
    elem = hashmap_create_elem(key, NULL, 0);
    EXPECT_EQ(NULL, elem);
}

//Test for hashmap_create_elem: data type:String data len:1
TEST_F(hashmapTestF, hashmap_create_elem_arg_valen1)
{
    hashmap_elem_t* elem;
    const char* key = "hello";
    void* data = (void*)"";
    elem = hashmap_create_elem(key, data, 1);
    EXPECT_STREQ("hello", elem->key);
    EXPECT_EQ(0, memcmp(data, elem->data, 1));
    EXPECT_EQ(NULL, elem->next);
}

//Test for hashmap_create_elem: data type:String data len:5
TEST_F(hashmapTestF, hashmap_create_elem_arg_valen5)
{
    hashmap_elem_t* elem;
    const char* key = "hello";
    void* data = (void*)"test";
    elem = hashmap_create_elem(key, data, 5);
    EXPECT_STREQ("hello", elem->key);
    EXPECT_EQ(0, memcmp(data, elem->data, 5));
    EXPECT_EQ(NULL, elem->next);
}

//Test for hashmap_create_elem: data type:int
TEST_F(hashmapTestF, hashmap_create_elem_arg_valint)
{
    hashmap_elem_t* elem;
    const char* key = "hello";
    int n = 100;
    void* data = (void*)&n;
    elem = hashmap_create_elem(key, data, sizeof(int));
    EXPECT_STREQ("hello", elem->key);
    EXPECT_EQ(0, memcmp(data, elem->data, sizeof(int)));
    EXPECT_EQ(NULL, elem->next);
}

//Test for hashmap_create_elem: data type: double
TEST_F(hashmapTestF, hashmap_create_elem_arg_valdouble)
{
    hashmap_elem_t* elem;
    const char* key = "hello";
    double d = 3.1415926;
    void* data = (void*)&d;
    elem = hashmap_create_elem(key, data, sizeof(double));
    EXPECT_STREQ("hello", elem->key);
    EXPECT_EQ(0, memcmp(data, elem->data, sizeof(double)));
    EXPECT_EQ(NULL, elem->next);
}

//Test for hashmap_create_elem: string mixed by digit,alpha and other character
TEST_F(hashmapTestF, hashmap_create_elem_arg_valMix)
{
    hashmap_elem_t* elem;
    const char* key = "hello";
    void* data = (void*)malloc(20);
    char source[20] = "abcd12345:2d*@',ac";
    memcpy(data, source, 20);

    elem = hashmap_create_elem(key, data, 20);
    EXPECT_STREQ("hello", key);
    EXPECT_EQ(0, memcmp(data, elem->data, 20));
    EXPECT_EQ(NULL, elem->next);
}

//Test for hashmap_create_elem: data type:Item
TEST_F(hashmapTestF, hashmap_create_elem_arg_valItem)
{
    Item item;
    item.name = "apple";
    item.id = 1;
    item.price = 0.99;

    const char* key = "hello";
    void* data = (void*)&item;
    hashmap_elem_t* elem;

    elem = hashmap_create_elem(key, data, sizeof(item));
    EXPECT_STREQ("hello", elem->key);
    EXPECT_EQ(0, memcmp(data, elem->data, sizeof(item)));
    EXPECT_EQ(NULL, elem->next);
}

/**
  *End_Test_for function: hashmap_elem_t* hashmap_create_elem(const char* key, const void* data, unsigned int value_len)
  *=====================================================================================================================
  */

/**
  *=====================================================================================================================
  *Begin_Test_for function: int hashmap_put_internal(hashmap_map_t *map, hashmap_elem_t *elem)
  */

//Test for hashmap_put_internal: map=null
TEST_F(hashmapTestF, hashmap_put_internal_arg_nullmap)
{
    hashmap_elem_t elem;

    EXPECT_EQ(HM_E_FAIL, hashmap_put_internal(NULL, &elem));
}

//Test for hashmap_put_internal: elem=null
TEST_F(hashmapTestF, hashmap_put_internal_arg_nullelem)
{
    EXPECT_EQ(HM_E_FAIL, hashmap_put_internal(&map, NULL));
}

//Test for hashmap_put_internal: put an elem into an empty map,and the map has not been iniatiallized(map.size=0 map.table_size=0)
TEST_F(hashmapTestF, hashmap_put_internal_into_emptymap_without_initia)
{
    hashmap_elem_t* elem;
    const char* key = "test";
    void* data = (void*)"1234";

    elem = hashmap_create_elem(key, data, 5);
    unsigned long index = 0;
    int retCode;
    retCode = hashmap_put_internal(&map, elem);
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_E_FAIL, retCode);
}


//Test for hashmap_put_internal: put an elem into an empty map,and the map has been iniatiallized via hashmap_init(map.size=0 map.table_size>0)
TEST_F(hashmapTestF, hashmap_put_internal_into_emptymap)
{
    hashmap_elem_t *elem;
    const char* key = "this is a test:";
    void* data = (void*)"10.15.16.10:***";

    elem = hashmap_create_elem(key, data, 16);

    hashmap_init(&map, 1, NULL);

    int retCode;

    retCode = hashmap_put_internal(&map, elem);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);
    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 16));
}

//Test for hashmap_put_internal: put an elem whose key has already exists in the map
TEST_F(hashmapTestF, hashmap_put_internal_key_already_exists)
{
    hashmap_elem_t *elem;
    const char* key = "hello";
    void* data = (void*)":123456";
    int retCode;

    hashmap_init(&map, 1, NULL);
    //Create an elem and put it into the map
    elem = hashmap_create_elem(key, data, 8);
    hashmap_put_internal(&map, elem);

    //Contruct another elem whose key is also "hello"
    hashmap_elem_t* elem2;
    void* data1 = (void*)"test";
    elem2 = hashmap_create_elem(key, data1, 5);
    //Put elem2 into the map
    retCode = hashmap_put_internal(&map, elem2);

    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_E_KEYUSED, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 8));
    EXPECT_NE(0, memcmp(data1, map.elems[index]->data, 5));
}

//Test for hashmap_put_internal: put an elem whose value has already exists in the map
TEST_F(hashmapTestF, hashmap_put_internal_value_already_exists)
{
    hashmap_elem_t* elem;
    const char* key = "hello";
    void* data = (void*)"123456";
    int retCode;

    hashmap_init(&map, 1, NULL);
    //Create an elem and put it into the map
    elem = hashmap_create_elem(key, data, 7);
    hashmap_put_internal(&map, elem);

    //Create another elem whose value is also "123456"
    hashmap_elem_t* elem2;
    const char* key1 = "world";
    elem2 = hashmap_create_elem(key1, data, 7);
    retCode = hashmap_put_internal(&map, elem2);

    unsigned long index1 = 0;
    find_hash_index(map.table_size, key, &index1);
    unsigned long index2 = 0;
    find_hash_index(map.table_size, key1, &index2);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_NE(index1, index2);
    EXPECT_EQ(2ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key1, map.elems[index2]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index1]->data, 7));
    EXPECT_EQ(0, memcmp(data, map.elems[index2]->data, 7));
}

//Test for hashmap_put_internal: put an elem whose key and value both not exist in the map
TEST_F(hashmapTestF, hashmap_put_internal_diff_key_and_val)
{
    hashmap_elem_t* elem1;
    const char* key1 = "10.15.16.29";
    void* data1 = (void*)":3200";

    hashmap_elem_t* elem2;
    const char* key2 = "10.15.16.100";
    void* data2 = (void*)"80:";

    hashmap_init(&map, 1, NULL);
    elem1 = hashmap_create_elem(key1, data1, 6);
    elem2 = hashmap_create_elem(key2, data2, 4);
    hashmap_put_internal(&map, elem1);

    int retCode;
    unsigned long index1;
    unsigned long index2;

    retCode = hashmap_put_internal(&map, elem2);

    find_hash_index(map.table_size, key1, &index1);
    find_hash_index(map.table_size, key2, &index2);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_NE(index1, index2);
    EXPECT_EQ(2ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key1, map.elems[index1]->key);
    EXPECT_STREQ(key2, map.elems[index2]->key);
    EXPECT_EQ(0, memcmp(data1, map.elems[index1]->data, 6));
    EXPECT_EQ(0, memcmp(data2, map.elems[index2]->data, 4));
}
/**
  *End_Test for function: int hashmap_put_internal(hashmap_map_t *map, hashmap_elem_t *elem)
  *==========================================================================================
  */

/**
  *=========================================================================================
  *Begin_Test for function: int hashmap_put(hashmap_map_t *map, const char* key, const void* data, unsigned int value_len)
  */

//Test for hashmap_put: map=NULL
TEST_F(hashmapTestF, hashmap_put_arg_nullmap)
{
    int retCode;
    const char* key = "test";
    void* data = (void*)"123";
    hashmap_init(&map, 1, NULL);
    retCode = hashmap_put(NULL, key, data, 4);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_put: key=NULL
TEST_F(hashmapTestF, hashmap_put_arg_nullkey)
{
    int retCode;
    void* data = (void*)"123";
    hashmap_init(&map, 1, NULL);
    retCode = hashmap_put(&map, NULL, data, 4);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_put: data=NULL
TEST_F(hashmapTestF, hashmap_put_arg_nulldata)
{
    int retCode;
    const char* key = "test";
    hashmap_init(&map, 1, NULL);
    retCode = hashmap_put(&map, key, NULL, 0);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_put: put key and value into an empty map which has not been initiallized, table_size=0 & size=0
TEST_F(hashmapTestF, hashmap_put_into_emptymap_withoutinitial)
{
    int retCode;
    const char* key = "test";
    void* data = (void*)"1234";

    retCode = hashmap_put(&map, key, data, 5);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 5));
}

//Test for hashmap_put: put key and value into an empty map whose size=0 but table_size!=0
TEST_F(hashmapTestF, hashmap_put_into_emptymap)
{
    int retCode;
    const char* key = "test";
    void* data = (void*)"1234";
    hashmap_init(&map, 1, NULL);

    retCode = hashmap_put(&map, key, data, 5);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 5));
}

//Test for hashmap_put: key already exists in the map
TEST_F(hashmapTestF, hashmap_put_key_already_exists)
{
    const char* key = "test";
    void* data = (void*)"111";
    int retCode;

    hashmap_init(&map, 1, NULL);
    hashmap_put(&map, key, data, 4);

    void* data1 = (void*)"1234";
    retCode = hashmap_put(&map, key, data1, 5);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_E_KEYUSED, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 4));
}

//Test for hashmap_put:put into the same value
TEST_F(hashmapTestF, hashmap_put_sameval)
{
    const char* key1 = "hello";
    void* data = (void*)"1111";
    int retCode;

    hashmap_init(&map, 1, NULL);
    hashmap_put(&map, key1, data, 5);
    retCode = hashmap_put(&map, "world", data, 5);
    unsigned long index1 = 0;
    find_hash_index(map.table_size, "hello", &index1);
    unsigned long index2 = 0;
    find_hash_index(map.table_size, "world", &index2);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(2ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_EQ(0, memcmp(data, map.elems[index1]->data, 5));
    EXPECT_EQ(0, memcmp(data, map.elems[index2]->data, 5));
}

//Test for hashmap_put: key not exists in the map
TEST_F(hashmapTestF, hashmap_put_diff_keyandval)
{
    const char* key1 = "hello";
    void* data1 = (void*)"123";
    const char* key2 = "world";
    void* data2 = (void*)"456";

    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    retCode -= hashmap_put(&map, key1, data1, 4);
    retCode -= hashmap_put(&map, key2, data2, 4);
    unsigned long index1 = 0;
    find_hash_index(map.table_size, key1, &index1);
    unsigned long index2 = 0;
    find_hash_index(map.table_size, key2, &index2);

    EXPECT_EQ(0, retCode);
    EXPECT_EQ(2ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_EQ(0, memcmp(data1, map.elems[index1]->data, 4));
    EXPECT_EQ(0, memcmp(data2, map.elems[index2]->data, 4));
    EXPECT_STREQ(key1, map.elems[index1]->key);
    EXPECT_STREQ(key2, map.elems[index2]->key);
}

//Test for hashmap_put: key="" & value=""
TEST_F(hashmapTestF, hashmap_put_kv_blank)
{
    const char* key = "";
    const void* data = (const void*)"";
    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    retCode = hashmap_put(&map, key, data, 1);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(0, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 1));
}

/**
  *End_Test_for function:int hashmap_put(hashmap_map_t *map, const char* key, const void* data, unsigned int value_len)
  *====================================================================================================================
  */

/**
  *===================================================================================================================
  *Begin_Test_for function: int hashmap_get(hashmap_map_t *map, const char* key, void **data)
  */

//Test for hashmap_get: map=NULL
TEST_F(hashmapTestF, hashmap_get_nullmap)
{
    void* data = NULL;
    EXPECT_EQ(HM_E_FAIL, hashmap_get(NULL, "hello", &data));
}

//Test for hashmap_get: key=NULL
TEST_F(hashmapTestF, hashmap_get_nullkey)
{
    void* data = NULL;;
    EXPECT_EQ(HM_E_FAIL, hashmap_get(&map, NULL, &data));
}

//Test for hashmap_get: data=NULL
TEST_F(hashmapTestF, hashmap_get_nulldata)
{
    EXPECT_EQ(HM_E_FAIL, hashmap_get(&map, "hello", NULL));
}

//Test for hashmap_get: get data from an empty map whose size=0 & table_size=0
TEST_F(hashmapTestF, hashmap_get_from_emptymap_withoutInitial)
{
    int retCode = 0;
    void* data = NULL;

    retCode = hashmap_get(&map, "hello", &data);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_get: get data from an empty map whose size=0 but table_size!=0
TEST_F(hashmapTestF, hashmap_get_from_emptymap)
{
    int retCode = 0;
    void* data = NULL;

    hashmap_init(&map, 1, NULL);

    retCode = hashmap_get(&map, "hello", &data);

    EXPECT_EQ(HM_E_NOTFOUND, retCode);
    EXPECT_EQ(NULL, data);
}

//Test for hashmap_get: get data from an non-empty map,but the given key doesn't exists in the map
TEST_F(hashmapTestF, hashmap_get_from_nonemptymap_but_key_not_exists)
{
    int retCode = 0;
    void* data = NULL;
    const char* key = "test";
    void* val = (void*)"12345";

    hashmap_init(&map, 1, NULL);
    hashmap_put(&map, key, val, 6);
    retCode = hashmap_get(&map, "hello", &data);

    EXPECT_EQ(HM_E_NOTFOUND, retCode);
    EXPECT_EQ(NULL, data);
}

//Test for hashmap_get: get data from an non-empty map, and the given key exists in the map
TEST_F(hashmapTestF, hashmap_get_from_nonemptymap)
{
    int retCode = 0;
    void* data = NULL;
    const char* key = "test";
    void* val = (void*)"12345";

    hashmap_init(&map, 1, NULL);
    retCode = hashmap_put(&map, key, val, 6);
    retCode -= hashmap_get(&map, key, &data);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(0, retCode);
    EXPECT_EQ(data, map.elems[index]->data);
}
/**
  *End_Test_for function: int hashmap_get(hashmap_map_t *map, const char* key, void **data)
  *===========================================================================================
  */

/**
  *======================================================================================================================
  *Begin_Test_for function: int hashmap_put_or_update(hashmap_map_t *map, const char* key, const void* data, unsigned int value_len)
  */

//Test for hashmap_put_or_update: map=NULL
TEST_F(hashmapTestF, hashmap_put_or_update_nullmap)
{
    void* data = (void*)"123";
    EXPECT_EQ(HM_E_FAIL, hashmap_put_or_update(NULL, "test", data, 4));
}

//Test for hashmap_put_or_update: key=NULL
TEST_F(hashmapTestF, hashmap_put_or_update_nullkey)
{
    void* data = (void*)"123";
    EXPECT_EQ(HM_E_FAIL, hashmap_put_or_update(&map, NULL, data, 4));
}

//Test for hashmap_put_or_update: data=NULL
TEST_F(hashmapTestF, hashmap_put_or_update_nulldata)
{
    EXPECT_EQ(HM_E_FAIL, hashmap_put_or_update(&map, "test", NULL, 0));
}

//Test for hashmap_put_or_update: put or update into an empty map without initiallization whose size=0 & table_size=0
TEST_F(hashmapTestF, hashmap_put_or_update_into_emptymap_withoutinitial)
{
    const char* key = "hello";
    const void* data = (const void*)"test";
    int retCode = 0;

    retCode = hashmap_put_or_update(&map, key, data, 5);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 5));
}

//Test for hashmap_put_or_update: put or update into an empty map whose size=0 but table_size!=0
TEST_F(hashmapTestF, hashmap_put_or_update_into_emptymap)
{
    const char* key = "hello";
    const void* data = (const void*)"test";
    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    retCode = hashmap_put_or_update(&map, key, data, 5);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 5));
}

//Test for hashmap_put_or_update: put or update into not empty map and the given key not exists int the map
TEST_F(hashmapTestF, hashmap_put_or_update_into_map_key_not_exists)
{
    const char* key1 = "hello";
    const void* data1 = (const void*)"123";
    const char* key = "test";
    const void* data = (const void*)"111";
    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    hashmap_put(&map, key1, data1, 4);
    retCode = hashmap_put_or_update(&map, key, data, 4);
    unsigned long index1 = 0;
    find_hash_index(map.table_size, key1, &index1);
    unsigned long index2 = 0;
    find_hash_index(map.table_size, key, &index2);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(2ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key1, map.elems[index1]->key);
    EXPECT_STREQ(key, map.elems[index2]->key);
    EXPECT_EQ(0, memcmp(data1, map.elems[index1]->data, 4));
    EXPECT_EQ(0, memcmp(data, map.elems[index2]->data, 4));
}

//Test for hashmap_put_or_update: put or update into not empty map and the given key has already exists in the map
TEST_F(hashmapTestF, hashmap_put_or_update_into_map_key_exists)
{
    const char* key = "hello";
    const void* data1 = (const void*)"123";
    const void* data2 = (const void*)"456";
    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    hashmap_put(&map, key, data1, 4);
    retCode = hashmap_put_or_update(&map, key, data2, 4);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data2, map.elems[index]->data, 4));
}

//Test for hashmap_put_or_update: put or update into map, and the key="",value=""
TEST_F(hashmapTestF, hashmap_put_or_update_kv)
{
    const char* key = "";
    const void* data = (const void*)"";
    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    retCode = hashmap_put_or_update(&map, key, data, 1);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 1));
}
/**
  *End_Test_for function: int hashmap_put_or_update(hashmap_map_t *map, const char* key, const void* data, unsigned int value_len)
  *===================================================================================================================
  */

/**
  *==================================================================================================================
  *Begin_Test_for function: int hashmap_expand(hashmap_map_t *map)
  */

//Test for hashmap_expand: map=NULL
TEST_F(hashmapTestF, hashmap_expand_nullmap)
{
    int retCode = 0;

    retCode = hashmap_expand(NULL);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_expand: expand table_size for an empty map without initialization whose size=0 & table_size=0
TEST_F(hashmapTestF, hashmap_expand_emptymap_withoutinitial)
{
    int retCode = 0;

    retCode = hashmap_expand(&map);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(0ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
}

//Test for hashmap_expand: expand table_size for an empty map whose size=0 & table_size!=0
TEST_F(hashmapTestF, hashmap_expand_emptymap)
{
    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    retCode = hashmap_expand(&map);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(0ul, map.size);
    EXPECT_EQ(97ul, map.table_size);
}

//Test for hashmap_expand: expand a map several times
TEST_F(hashmapTestF, hashmap_expand_several_times)
{
    int retCode = 0;

    hashmap_init(&map, 1, NULL);

    for(int i = 0; i < 14; i++)
    {
        retCode -= hashmap_expand(&map);
    }

    EXPECT_EQ(0, retCode);
    EXPECT_EQ(0ul, map.size);
    EXPECT_EQ(786433ul, map.table_size);
}

//Test for hashmap_expand: expand a map NUM_PRIMES(28)  times
/*TEST_F(hashmapTestF,hashmap_expand_NUM_PRIMES_times)
{
	int retCode=0;

	hashmap_init(&map,1,NULL);
	for(int i=0;i<27;i++)
	{
		retCode-=hashmap_expand(&map);
	}

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(0,map.size);
	EXPECT_EQ(4294967291ul,map.table_size);
}

//Test for hashmap_expand: expand a map NUM_PRIMES+1(29) times
TEST_F(hashmapTestF,hashmap_expand_exceed_NUM_PRIMES_times)
{
	int retCode=0;

	hashmap_init(&map,1,NULL);
	for(int i=0;i<28;i++)
	{
		retCode-=hashmap_expand(&map);
	}

	EXPECT_EQ(0,retCode);
	EXPECT_EQ(0,map.size);
	EXPECT_EQ(4294967291ul,map.table_size);
}*/

//Test for hashmap_expand: expand table_size for a not empty map
TEST_F(hashmapTestF, hashmap_expand_notemptymap)
{
    const char* key = "hello";
    const void* data = (const void*)"123";
    int retCode = 0;

    hashmap_init(&map, 0, NULL);
    hashmap_put(&map, key, data, 4);
    retCode = hashmap_expand(&map);
    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, map.size);
    EXPECT_EQ(97ul, map.table_size);
    EXPECT_STREQ(key, map.elems[index]->key);
    EXPECT_EQ(0, memcmp(data, map.elems[index]->data, 4));
}

//Test for hashmap_expand: expand table_size for not empty map which has several elems
TEST_F(hashmapTestF, hashmap_expand_notemptymap_several_elems)
{
    int retCode = 0;
    const char* keys[] = {"item", "10.16.15.23", "test", "this is a test", "111"};
    const char* datas[] = {"123", "4:5:6", "hello", "ok", "22222"};

    hashmap_init(&map, 0, NULL);

    for(int i = 0; i < 5; i++)
    {
        hashmap_put(&map, keys[i], datas[i], strlen(datas[i]) + 1);
    }

    retCode = hashmap_expand(&map);

    unsigned long index[5] = {0};

    for(int i = 0; i < 5; i++)
    {
        find_hash_index(map.table_size, keys[i], &index[i]);
    }

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(5ul, map.size);
    EXPECT_EQ(97ul, map.table_size);

    for(int i = 0; i < 5; i++)
    {
        EXPECT_STREQ(keys[i], map.elems[index[i]]->key);
        EXPECT_EQ(0, memcmp(datas[i], map.elems[index[i]]->data, strlen(datas[i]) + 1));
    }
}
/**
  *End_Test_for function: int hashmap_expand(hashmap_map_t *map)
  *==================================================================================================================
  */

/**
  *=================================================================================================================
  *Begin_Test_for function: int hashmap_internal_pointer_reset(hashmap_map_t *map)
  */

//Test for hashmap_internal_pointer_reset: map=NULL
TEST_F(hashmapTestF, hashmap_internal_pointer_reset_nullmap)
{
    int retCode = 0;

    retCode = hashmap_internal_pointer_reset(NULL);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_internal_pointer_reset: empty map without intialization
TEST_F(hashmapTestF, hashmap_internal_pointer_reset_emptymap_withoutinitial)
{
    int retCode = 0;

    retCode = hashmap_internal_pointer_reset(&map);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(NULL, map.internal_pointer);
}

//Test for hashmap_internal_pointer_reset: empty map
TEST_F(hashmapTestF, hashmap_internal_pointer_reset_emptymap)
{
    int retCode = 0;

    hashmap_init(&map, 0, NULL);
    retCode = hashmap_internal_pointer_reset(&map);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(NULL, map.internal_pointer);
}

//Test for hashmap_internal_pointer_reset: not empty map which has one elem
TEST_F(hashmapTestF, hashmap_internal_pointer_reset_with_one_elem)
{
    int retCode = 0;
    const char* key = "test";
    const void* data = "12345";

    hashmap_init(&map, 0, NULL);
    hashmap_put(&map, key, data, 6);

    unsigned long index = 0;
    find_hash_index(map.table_size, key, &index);
    retCode = hashmap_internal_pointer_reset(&map);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_EQ(map.elems[index], map.internal_pointer);
}

//Test for hashmap_internal_pointer_reset: not empty map which has several elems
TEST_F(hashmapTestF, hashmap_internal_pointer_reset_with_several_elems)
{
    int retCode = 0;
    const char* keys[] = {"abc", "def", "ghi", "jkl", "mn", "xyz"};
    const char* datas[] = {"123", "456", "789", "000", "1234", "kkk"};
    unsigned long index[6] = {0};
    unsigned long min_index = ULONG_MAX;

    hashmap_init(&map, 0, NULL);

    for(int i = 0; i < 6; i++)
    {
        hashmap_put(&map, keys[i], datas[i], strlen(datas[i]) + 1);
    }

    for(int i = 0; i < 6; i++)
    {
        find_hash_index(map.table_size, keys[i], &(index[i]));

        if(index[i] < min_index)
            min_index = index[i];
    }

    retCode = hashmap_internal_pointer_reset(&map);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(6ul, map.size);
    EXPECT_EQ(53ul, map.table_size);
    EXPECT_EQ(map.elems[min_index], map.internal_pointer);
}


/**
  *End_Test_for function: int hashmap_internal_pointer_reset(hashmap_map_t *map)
  *==================================================================================================================
  */

/**
  *===================================================================================================================
  *Begin_Test_for function: int hashmap_remove_internal(hashmap_map_t *map, hashmap_elem_t *elem)
  */

//Test for hashmap_remove_internal: map=NULL
TEST_F(hashmapTestF, hashmap_remove_internal_nullmap)
{
    int retCode = 0;
    hashmap_elem_t* elem;
    const char* key = "test";
    const void* data = (const void*)"123";
    elem = hashmap_create_elem(key, data, 4);

    retCode = hashmap_remove_internal(NULL, elem);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_remove_internal: elem=NULL
TEST_F(hashmapTestF, hashmap_rempve_internal_nullelem)
{
    int retCode = 0;

    hashmap_init(&map, 1, NULL);
    retCode = hashmap_remove_internal(&map, NULL);

    EXPECT_EQ(HM_E_FAIL, retCode);
}

/**
  *====================================================================================================================
  *Begin_Test_for function: unsigned long hashmap_size(hashmap_map_t *map)
  */

//Test for hashmap_size: map=NULL
TEST_F(hashmapTestF, hashmap_size_null)
{
    EXPECT_EQ(0ul, hashmap_size(&map));
}

//Test for hashmap_size: size=1
TEST_F(hashmapTestF, hashmap_size_one)
{
    const char* key = "hello";
    void* data = (void*)"test";

    int retCode = hashmap_put(&map, key, data, 5);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(1ul, hashmap_size(&map));
}

//Test for hashmap_size: size=2
TEST_F(hashmapTestF, hashmap_size_two)
{
    const char* key1 = "hello";
    void* data1 = (void*)"test";

    const char* key2 = "world";
    void* data2 = (void*)"12345";

    int retCode = hashmap_put(&map, key1, data1, 5);
    retCode -= hashmap_put(&map, key2, data2, 6);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(2ul, hashmap_size(&map));
}
/**
  *End_Test_for function: unsigned long hashmap_size(hashmap_map_t *map)
  *========================================================================
  */

/**
  *=========================================================================
  *Begin_Test_for function: int hashmap_remove(hashmap_map_t *map, const char* key)
  */

//Test for hashmap_remove: table size=0
TEST_F(hashmapTestF, hashmap_remove_zero_table_size)
{
    int retCode = 0;
    const char* key = "hello";

    retCode = hashmap_remove(&map, key);
    EXPECT_EQ(HM_E_FAIL, retCode);
}

//Test for hashmap_remove: key not exists
TEST_F(hashmapTestF, hashmap_remove_key_not_exists)
{
    int retCode = 0;
    const char* key = "hello";

    hashmap_init(&map, 0, NULL);

    retCode = hashmap_remove(&map, key);

    EXPECT_EQ(HM_E_NOTFOUND, retCode);
}

//Test for hashmap_remove: key exists
TEST_F(hashmapTestF, hashmap_remove_key_exists)
{
    int retCode = 0;
    const char* key = "hello";
    const char* val = "hi";

    hashmap_init(&map, 0, NULL);
    hashmap_put(&map, key, val, 3);

    retCode = hashmap_remove(&map, key);

    EXPECT_EQ(HM_S_OK, retCode);
    EXPECT_EQ(0ul, map.size);
}

/**
  *End_Test_for function: int hashmap_remove(hashmap_map_t *map, const char* key)
  *========================================================================================
  */

//End Test for hashmap.c
