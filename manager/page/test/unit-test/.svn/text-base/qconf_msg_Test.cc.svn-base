#include "gtest/gtest.h"
#include "qconf_msg.h"
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>
#include <sys/types.h>

#define STATIC_MSG_QUEUE_KEY 0xaa1122ee

//unit test case for qconf_msg.c

//Related test environment set up and tear down
class qconf_msgTestF : public ::testing::Test
{
protected:
    virtual void SetUp()
    {
    }

    virtual void TearDown()
    {
        msgctl(msgid, IPC_RMID, NULL);
    }

    int msgid;
};
/**
  *============================================================================
  *Begin_Test_for function: int create_msg_queue(key_t key, int *msgid)
  */

//Test for create_msg_queue: msg queue related to the key:STATIC_MSG_QUEUE_KEY  not exists yet
TEST_F(qconf_msgTestF, create_msg_queue_not_exists)
{
    int retCode = 0;
    key_t msg_queue_key = STATIC_MSG_QUEUE_KEY;

    retCode = create_msg_queue(msg_queue_key, &msgid);

    EXPECT_EQ(QCONF_OK, retCode);
}

//Test for create_msg_queue: msg queue related to the key: STATIC_MSG_QUEUE_KEY already exists
TEST_F(qconf_msgTestF, create_msg_queue_already_exists)
{
    int retCode = 0;
    key_t msg_queue_key = STATIC_MSG_QUEUE_KEY;

    retCode = create_msg_queue(msg_queue_key, &msgid);
    retCode -= create_msg_queue(msg_queue_key, &msgid);

    EXPECT_EQ(QCONF_OK, retCode);
}

//Test for create_msg_queue: create msg queue by a new key
TEST_F(qconf_msgTestF, create_msg_queue_by_a_new_key)
{
    int retCode = 0;
    key_t key = 0xd10c5610;

    retCode = create_msg_queue(key, &msgid);

    EXPECT_EQ(QCONF_OK, retCode);
}

//Test for create_msg_queue: create msg queue by a new key
TEST_F(qconf_msgTestF, create_msg_queue_by_a_new_key2)
{
    int retCode = 0;
    key_t key = 0xd10c5611;

    retCode = create_msg_queue(key, &msgid);

    EXPECT_EQ(QCONF_OK, retCode);
}
/**
  *End_Test_for function: int create_msg_queue(key_t key, int *msgid)
  *===============================================================================
  */

/**
  *===============================================================================
  *Begin_Test_for function: int msg_send(int msgid, char *message)
  */

//Test for msg_send: message=NULL
TEST_F(qconf_msgTestF, msg_send_null_message)
{
    int retCode = 0;
    key_t key = 0x12345abc;

    create_msg_queue(key, &msgid);
    retCode = msg_send(msgid, NULL);

    EXPECT_EQ(QCONF_ERR_PARAM, retCode);
}

//Test for msg_send: send msg to an unexisted msgid
TEST(qconf_msgTest, msg_send_unexisted_msgid1)
{
    int retCode = 0;
    int msgids = -1;
    const char* message = "hello";

    retCode = msg_send(msgids, message);

    EXPECT_EQ(-1, retCode);
    /**
      *log output:
      * Send msg failed! Err: Invalid argument
      */
}

//Test for msg_send: send empty message
TEST_F(qconf_msgTestF, msg_send_empty_message)
{
    int retCode = 0;
    key_t key = STATIC_MSG_QUEUE_KEY;
    const char* message = "";

    create_msg_queue(key, &msgid);
    retCode = msg_send(msgid, message);

    EXPECT_EQ(QCONF_FAILED, retCode);
    /**
      *log output:
      * Length of message is 0!
      */
}

//Test for msg_send: send msg by msgid which is created by a key != STATIC_MSG_QUEUE_KEY
TEST_F(qconf_msgTestF, msg_send_msg_to_msg_queue_by_msgid_created_by_another_key)
{
    int retCode = 0;
    key_t key = 0x101023ab;
    const char* message = "hihihi";

    create_msg_queue(key, &msgid);
    retCode = msg_send(msgid, message);

    EXPECT_EQ(QCONF_OK, retCode);
}

//Test for msg_send: length of msg equals with QCONF_MAX_MSG_LEN
TEST_F(qconf_msgTestF, msg_send_length_of_msg_exceed)
{
    int retCode = 0;
    key_t key = STATIC_MSG_QUEUE_KEY;
    char message[QCONF_MAX_MSG_LEN + 1] = {0};
    memset(message, 'a', QCONF_MAX_MSG_LEN);
    message[QCONF_MAX_MSG_LEN] = '\0';

    create_msg_queue(key, &msgid);
    retCode = msg_send(msgid, message);

    EXPECT_EQ(QCONF_FAILED, retCode);
    /**
      *log output:
      * Length of message is equal or larger than 64, message:abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz012345678901
      */
}

//Test for msg_send: length of msg exceed QCONF_MAX_MSG_LEN
TEST_F(qconf_msgTestF, msg_send_length_exceed2)
{
    int retCode = 0;
    key_t key = STATIC_MSG_QUEUE_KEY;
    char message[QCONF_MAX_MSG_LEN + 2] = {0};
    memset(message, 'a', QCONF_MAX_MSG_LEN + 1);
    message[QCONF_MAX_MSG_LEN + 1] = '\0';

    create_msg_queue(key, &msgid);
    retCode = msg_send(msgid, message);

    EXPECT_EQ(QCONF_FAILED, retCode);
    /**
      *log output:
      * Length of message is equal or larger than 64, message:abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789012
      */
}

//Test for msg_send: send msg failed since has no access to write the msg queue
//tips: need to modify source code to make this test case run successfully
TEST_F(qconf_msgTestF, msg_send_failed_since_has_no_access_to_write)
{
    int retCode = 0;
    key_t key = 0x25251000;
    struct msqid_ds buf;
    memset(&buf, 0, sizeof(buf));
    buf.msg_perm.mode = 0444;
    buf.msg_perm.uid = getuid();
    buf.msg_perm.gid = getgid();
    buf.msg_perm.cuid = geteuid();
    buf.msg_perm.cgid = getegid();

    create_msg_queue(key, &msgid);
    msgctl(msgid, IPC_SET, &buf);
    retCode = msg_send(msgid, "has no access to write");

    EXPECT_EQ(-1, retCode);
    /**
      *log output:
      *Send msg failed! Err: Permission denied
      */
}

//Test for msg_send: send msg successfully
TEST_F(qconf_msgTestF, msg_send_successfully)
{
    int retCode = 0;
    key_t key = STATIC_MSG_QUEUE_KEY;
    const char* message = "hello";

    create_msg_queue(key, &msgid);
    retCode = msg_send(msgid, message);

    EXPECT_EQ(QCONF_OK, retCode);
}

//Test for msg_send: send msg to a msg queue repeatedly
TEST_F(qconf_msgTestF, msg_send_repeatedly)
{
    int retCode = 0;
    key_t key = STATIC_MSG_QUEUE_KEY;
    const char* message = "hello";
    char *ret_mes = NULL;
    unsigned long i = 0;
    struct msqid_ds buf;
    memset(&buf, 0, sizeof(buf));

    create_msg_queue(key, &msgid);

    for(i = 0; i < 65536; i++)
    {
        retCode -= msg_send(msgid, message);
        EXPECT_EQ(QCONF_OK, retCode);
        // check whether there is no value in the queue
        retCode = msgctl(msgid, IPC_STAT, &buf);
        EXPECT_EQ(0, retCode);
        EXPECT_EQ(1ul, buf.msg_qnum);
        EXPECT_EQ(strlen(message) + 1, buf.__msg_cbytes);

        retCode -= msg_receive(msgid, &ret_mes);
        EXPECT_EQ(QCONF_OK, retCode);
        // check whether there is no value in the queue
        retCode = msgctl(msgid, IPC_STAT, &buf);
        EXPECT_EQ(0, retCode);
        EXPECT_EQ(0ul, buf.msg_qnum);
        EXPECT_EQ(0ul, buf.__msg_cbytes);
    }
}

/**
  *End_Test_for function: int msg_send(int msgid, char *message)
  *===================================================================================
  */

/**
  *===================================================================================
  *Begin_Test_for function: int msg_receive(int msgid, char **message)
  */

//Test for msg_receive: recv msg from an unexisted msgid
TEST(qconf_msgTest, msg_receive_from_unexisted_msgid)
{
    int retCode = 0;
    char* message = NULL;

    retCode = msg_receive(-1, &message);

    EXPECT_EQ(-1, retCode);
    /*
      *log output:
      * get message from queue failed! Msgid: -1, Err: Invalid argument
      */
}

//Test for msg_receive: no message in msg queue
TEST_F(qconf_msgTestF, msg_recv_from_msgid_has_no_msg)
{
    int retCode = 0;
    key_t key = 0x12340710;
//    char* message = NULL;
    struct msqid_ds buf;
    memset(&buf, 0, sizeof(buf));

    create_msg_queue(key, &msgid);
    retCode = msgctl(msgid, IPC_STAT, &buf);
    EXPECT_EQ(0, retCode);
    EXPECT_EQ(0ul, buf.msg_qnum);
    EXPECT_EQ(0ul, buf.__msg_cbytes);
//    retCode = msg_receive(msgid, &message);
//    EXPECT_EQ(40, retCode);
    /**
      *log output:
      * No message in the queue! msgid: 32769
      */
}

//Test for msg_receive: recv msg from msg queue by msgid created by a new key
TEST_F(qconf_msgTestF, msg_recv_from_msg_queue_by_msgid_created_by_a_new_key)
{
    int retCode = 0;
    key_t key = 0x25252510;
    char* message = NULL;

    create_msg_queue(key, &msgid);
    msg_send(msgid, "hihihi");
    retCode = msg_receive(msgid, &message);

    EXPECT_EQ(0, retCode);
    EXPECT_STREQ("hihihi", message);
    free(message);
    message = NULL;
}

//Test for msg_receive: msg in msg queue has already been received
TEST_F(qconf_msgTestF, msg_recv_from_msg_queue_but_msg_has_been_received_already)
{
    int retCode = 0;
    key_t key = 0x2525101a;
    char* message = NULL;
    struct msqid_ds buf;
    memset(&buf, 0, sizeof(buf));

    create_msg_queue(key, &msgid);
    msg_send(msgid, "hello");

    msg_receive(msgid, &message);
    EXPECT_STREQ("hello", message);
    free(message);
    message = NULL;

    // check whether there is no value in the queue
    retCode = msgctl(msgid, IPC_STAT, &buf);
    EXPECT_EQ(0, retCode);
    EXPECT_EQ(0ul, buf.msg_qnum);
    EXPECT_EQ(0ul, buf.__msg_cbytes);

    //retCode = msg_receive(msgid, &message);
    // EXPECT_EQ(40, retCode);
    /**
      *log output:
      * No message in the queue! msgid: 65538
      */
}

//Test for msg_receive: recv msg from msg queue but has no access to read it
//tips: need to modify source code in order to make this test case run successfully
TEST_F(qconf_msgTestF, msg_recv_from_msg_queue_but_has_no_access_to_read_it)
{
    int retCode = 0;
    key_t key = 0x12345ae;
    char* message = NULL;
    struct msqid_ds buf;
    memset(&buf, 0, sizeof(buf));
    buf.msg_perm.mode = 0222;
    buf.msg_perm.uid = getuid();
    buf.msg_perm.gid = getgid();
    buf.msg_perm.cuid = geteuid();
    buf.msg_perm.cgid = getegid();

    create_msg_queue(key, &msgid);
    msg_send(msgid, "hi");

    msgctl(msgid, IPC_SET, &buf);
    retCode = msg_receive(msgid, &message);

    EXPECT_EQ(QCONF_FAILED, retCode);
    /**
      *log output:
      * get message from queue failed! Msgid: 458764, Err: Permission denied
      */
}

//Test for msg_receive: recv msg successfully
TEST_F(qconf_msgTestF, msg_receive_successfully)
{
    int retCode = 0;
    key_t key = 0x10102345;
    char* message = NULL;

    create_msg_queue(key, &msgid);
    msg_send(msgid, "hello");
    retCode = msg_receive(msgid, &message);

    EXPECT_EQ(0, retCode);
    EXPECT_STREQ("hello", message);
    free(message);
    message = NULL;
}

//Test for msg_receive: recv times = send times
TEST_F(qconf_msgTestF, msg_receive_times_equals_send_times)
{
    int retCode = 0;
    key_t key = 0x12341234;
    char* msg = NULL;

    create_msg_queue(key, &msgid);

    for(int i = 0; i < 10; i++)
    {
        msg_send(msgid, "hello");
    }

    for(int i = 0; i < 10; i++)
    {
        retCode -= msg_receive(msgid, &msg);
        EXPECT_STREQ("hello", msg);
        free(msg);
        msg = NULL;
    }

    EXPECT_EQ(QCONF_OK, retCode);
}

//Test for msg_receive: recv times > send time
TEST_F(qconf_msgTestF, msg_receive_times_more_than_send_times)
{
    int retCode = 0;
    key_t key = 0x23451010;
    char* msg = NULL;
    struct msqid_ds buf;
    memset(&buf, 0, sizeof(buf));

    create_msg_queue(key, &msgid);

    for(int i = 0; i < 10; i++)
    {
        msg_send(msgid, "hello");
    }

    for(int i = 0; i < 10; i++)
    {
        retCode -= msg_receive(msgid, &msg);
        EXPECT_STREQ("hello", msg);
        free(msg);
        msg = NULL;
    }

    // check whether there is no value in the queue
    retCode = msgctl(msgid, IPC_STAT, &buf);
    EXPECT_EQ(0, retCode);
    EXPECT_EQ(0ul, buf.msg_qnum);
    EXPECT_EQ(0ul, buf.__msg_cbytes);


//    retCode -= msg_receive(msgid, &msg);
//    EXPECT_EQ(-40, retCode);
//    EXPECT_EQ(NULL, msg);
}
/**
  *End_Test_for function: int msg_receive(int msgid, char **message)
  *===============================================================================
  */

//End Test for qconf_msg.c
